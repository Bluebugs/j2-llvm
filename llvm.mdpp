class: top, center, inverse

# The LLVM Compiler Infrastructure

--

### LLVM Core

--

### Clang

--

### LLD

--

### LLDB

--

#### libc++

--

#### compiler-rt

---
class: middle, center, inverse

# Let's add our target!

#### Clang - LLVM -> LLD

---

class: middle, center, inverse

# Clang

#### Clang generates LLVM IR from C / C++ / Objective-C

#### Lowers front end constructions to lower-level ones

#### Intermediate representations are supposed to be target-independent

#### LLVM IR is not, because source languages depend on it

---
class: top, center, inverse

## Clang

Target informations:

```center
Pointer width, pointer align, size_t / ptrdirr_t types, endianness, etc.
```

--

CPP defines:

```center
__TARGET__, __ELF_, __APPLE__, __x86__, etc.
```

--

`ld.so` / ELF:

```center
loader, ELF32 / ELF64, etc.
```

---
class: top, center, inverse

## LLVM Core

#### Registers:

```center
registers, callee saved, caller saved, fp, sp, reserved, etc.
```

--

#### Instructions:

```center
opcode, encoding, in / out regs, IR pattern, string, isBranch, sideEffects, etc.
```

--

#### Calling conventions:

```center
argument passing, result value, stack alignment, argument types, etc.
```

--

#### Relocations:

```center
symbols, relocation generation, ELF definitions, etc.
```

---
class: top, center, inverse

## LLVM Core

#### Lowering:

```center
expand instructions, copy arguments to registers, stack management, etc.
```

--

#### Legalization:

```center
legal types, legal instructions, expand illegal instructions etc.
```

--

#### Target-specific passes:

```center
compute delay slots, optimize addressing mode, etc.
```

---
class: top, center, inverse

## LLD

### We generate relocations in the back end

### We need to fix them in the linker

--

#### ELF:

```center
ELF arch, target info, etc.
```

--

#### Relocations:

```center
relocation type, position independent, relocation action, relocation name, etc.
```
