class: top, center, inverse

# Goal

#### C file

```c
int foo(int);
int bar(int a)
{
  return foo(a);
}
```

--

#### J Core machine code

```asm
0x100:	e2 2f 	mov.l	r14, @r15
0x102:	e3 6f 	mov	  r15, r14
0x104:	f0 7f 	add	  #-16, r15
[...]
0x10c:	0b 40 	jsr	  @r0
0x10e:	09 00 	nop
[...]
0x118:	0b 00 	rts
0x11a:	09 00 	nop
```

---

class: middle, center, inverse

# Goal

#### NOT write a compiler from scratch

#### Don't reimplement smart and optimized algorithms

#### Instead, discover them

#### And discover other targets

### Understand compiler internals

---

class: middle, center, inverse

# LLVM

#### Collection of libraries

#### Releases libraries

#### Expose APIs to every stage of the compiler

#### Rarely care about backward compatibility

---

class: top, center, inverse

# Toolchain

### Compilation - cc1

--

### Assembly - as

--

### Linking - ld

--

### Runtime - builtins / libc

---

class: top, center, inverse

# Compilation

### Lexing

--

### Parsing

--

### Semantic analysis

--

### Intermediate representation

--

### IR optimizations

--

### Instruction selection

--

### Register allocation

---

class: top, center, inverse

# Assembly

### Parsing

--

### Encoding

--

# Linking

### Collect object files

--

### Generate sections (.plt, .dynamic, ...)

--

### Merge sections

--

### Fix relocations

---

class: top, center, inverse

# Runtime

### Builtins

--

### libc

--

### Sanitizers
